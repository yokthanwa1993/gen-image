const express = require('express');
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
const { createWebPAndUploadViaBrowserless } = require('./create-webp-via-browserless.js');

const app = express();
const port = 3001; // ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö server ‡πÄ‡∏î‡∏¥‡∏°

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏®‡∏π‡∏ô‡∏¢‡πå
const asyncHandler = fn => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};

// Route ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û
app.get('/', asyncHandler(async (req, res) => {
    const { 
        text, 
        fontSize = 100, 
        quality = 90, 
        maxWidth = 700, 
        lineHeight = 1.2 
    } = req.query;

    if (!text) {
        return res.status(400).json({
            error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (text parameter)',
            example: `http://localhost:${port}/?text=‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`
        });
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á | ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
    const decodedText = decodeURIComponent(text).replace(/\|/g, '\n');

    console.log(`\nüì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request: "${decodedText}"`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    const options = {
        text: decodedText,
        fontSize: parseInt(fontSize, 10),
        quality: parseInt(quality, 10),
        maxWidth: parseInt(maxWidth, 10),
        lineHeight: parseFloat(lineHeight),
        browserlessToken: "77482ddfd0ec44d1c1a8b55ddf352d98" // ‡πÉ‡∏™‡πà Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å browserless script
    const imageUrl = await createWebPAndUploadViaBrowserless(options);

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô JSON
    res.status(200).json({
        success: true,
        text: decodedText,
        imageUrl: imageUrl
    });
}));

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (Info)
app.get('/info', (req, res) => {
    res.status(200).json({
        message: 'Browserless Image Generator API',
        usage: `GET /?text=‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°&fontSize=100&quality=90`,
        example: `http://localhost:${port}/?text=‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ|‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà`
    });
});

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
app.use((err, req, res, next) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Server:', err.stack);
    res.status(500).json({ 
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        message: err.message 
    });
});


// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server
app.listen(port, () => {
    console.log(`üöÄ Server 2 (Browserless) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port}`);
    console.log(`üìñ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${port}/info`);
});

module.exports = app;

