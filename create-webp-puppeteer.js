const fs = require('fs');
const puppeteer = require('puppeteer');
const axios = require('axios');
const FormData = require('form-data');

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
function wrapText(text, maxWidth, fontSize) {
  const avgCharWidth = fontSize * 0.6;
  const maxCharsPerLine = Math.floor(maxWidth / avgCharWidth);
  const words = text.split(' ');
  const lines = [];
  let currentLine = '';
  for (const word of words) {
    const testLine = currentLine ? `${currentLine} ${word}` : word;
    if (testLine.length <= maxCharsPerLine) {
      currentLine = testLine;
    } else {
      if (currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        lines.push(word);
      }
    }
  }
  if (currentLine) {
    lines.push(currentLine);
  }
  return lines;
}

function fontToBase64(fontPath) {
  try {
    const fontBuffer = fs.readFileSync(fontPath);
    return fontBuffer.toString('base64');
  } catch (error) {
    console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå ${fontPath}:`, error.message);
    return null;
  }
}

function createHTML(text, fontSize = 100, maxWidth = 700, lineHeight = 1.2, fontPath = "SFThonburi-Bold.ttf") {
    const lines = wrapText(text, maxWidth, fontSize);
    const fontBase64 = fontToBase64(fontPath);
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&display=swap');
            ${fontBase64 ? `
            @font-face {
                font-family: 'SFThonburi-Bold';
                src: url('data:font/truetype;base64,${fontBase64}') format('truetype');
                font-weight: bold;
            }
            ` : ''}
            body {
                margin: 0;
                padding: 0;
                width: 1080px;
                height: 1080px;
                background-color: #000000;
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: ${fontBase64 ? "'SFThonburi-Bold'," : ""} 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', Arial, sans-serif;
            }
            .text-container {
                text-align: center;
                color: white;
                font-size: ${fontSize}px;
                font-weight: bold;
                line-height: ${lineHeight};
            }
            .line {
                display: block;
                margin: 0;
            }
        </style>
    </head>
    <body>
        <div class="text-container">
            ${lines.map(line => `<div class="line">${line}</div>`).join('')}
        </div>
    </body>
    </html>`;
    return htmlContent;
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
async function uploadToFreeimage(base64Image) {
    const apiKey = '6d207e02198a847aa98d0a2a901485a5';
    const form = new FormData();
    form.append('key', apiKey);
    form.append('source', base64Image);
    form.append('format', 'json');

    try {
        console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Freeimage.host...');
        const response = await axios.post('https://freeimage.host/api/1/upload', form, {
            headers: {
                ...form.getHeaders()
            }
        });

        if (response.data && response.data.status_code === 200) {
            console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            return response.data.image.url;
        } else {
            throw new Error(`API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${response.data.status_txt || 'Unknown error'}`);
        }
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:', error.message);
        throw error;
    }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Local Puppeteer ---
async function createWebPAndUpload(options = {}) {
  const {
    text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
    fontSize = 100,
    maxWidth = 700,
    lineHeight = 1.2,
    quality = 90,
    fontPath = "SFThonburi-Bold.ttf"
  } = options;

  let browser;
  
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Puppeteer (‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡πà‡∏≤)...');
    
    browser = await puppeteer.launch({
      headless: true, // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    await page.setViewport({
      width: 1080,
      height: 1080,
      deviceScaleFactor: 1
    });
    
    const htmlContent = createHTML(text, fontSize, maxWidth, lineHeight, fontPath);
    
    console.log('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...');
    await page.setContent(htmlContent, {
      waitUntil: 'load'
    });
    
    await page.evaluateHandle('document.fonts.ready');
    
    console.log('üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)...');
    const imageBuffer = await page.screenshot({
      type: 'webp',
      quality: quality,
      encoding: 'base64'
    });

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ browser ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    await browser.close();
    browser = null; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô finally

    const imageUrl = await uploadToFreeimage(imageBuffer);
    
    return imageUrl;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ browser ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏°‡∏≠‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error
    if (browser) {
        await browser.close();
    }
    throw error;
  }
}

// --- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---
async function main() {
  const imageUrl = await createWebPAndUpload({
    text: '‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Åüë∂" ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ó‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
    fontSize: 100,
    maxWidth: 700,
    quality: 90,
    fontPath: "SFThonburi-Bold.ttf"
  });
  
  if (imageUrl) {
    console.log('\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('üîó URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', imageUrl);
  }
}

// --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ ---
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { 
  createWebPAndUpload,
  createHTML,
  wrapText 
};
